// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sensors_WPF__.NET_03._1_.Sensors;

#nullable disable

namespace Sensors_WPF__.NET_03._1_.Migrations
{
    [DbContext(typeof(SensorsDbContext))]
    partial class SensorsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Sensors_WPF__.NET_03._1_.Modes.IMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.ToTable("Modes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IMode");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Sensors_WPF__.NET_03._1_.Sensors.Sensor", b =>
                {
                    b.Property<int>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SensorId"));

                    b.Property<int>("AbstractModeId")
                        .HasColumnType("int");

                    b.Property<string>("SensorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SensorId");

                    b.HasIndex("AbstractModeId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("Sensors_WPF__.NET_03._1_.Modes.CalibrationMode", b =>
                {
                    b.HasBaseType("Sensors_WPF__.NET_03._1_.Modes.IMode");

                    b.HasDiscriminator().HasValue("CalibrationMode");
                });

            modelBuilder.Entity("Sensors_WPF__.NET_03._1_.Modes.SleepMode", b =>
                {
                    b.HasBaseType("Sensors_WPF__.NET_03._1_.Modes.IMode");

                    b.HasDiscriminator().HasValue("SleepMode");
                });

            modelBuilder.Entity("Sensors_WPF__.NET_03._1_.Modes.WorkMode", b =>
                {
                    b.HasBaseType("Sensors_WPF__.NET_03._1_.Modes.IMode");

                    b.HasDiscriminator().HasValue("WorkMode");
                });

            modelBuilder.Entity("Sensors_WPF__.NET_03._1_.Sensors.Sensor", b =>
                {
                    b.HasOne("Sensors_WPF__.NET_03._1_.Modes.IMode", "IMode")
                        .WithMany()
                        .HasForeignKey("AbstractModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IMode");
                });
#pragma warning restore 612, 618
        }
    }
}
