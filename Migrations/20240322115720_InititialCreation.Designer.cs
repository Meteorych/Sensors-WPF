// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sensors_WPF__.NET_03._1_.Sensors;

#nullable disable

namespace Sensors_WPF__.NET_03._1_.Migrations
{
    [DbContext(typeof(SensorsDbContext))]
    [Migration("20240322115720_InititialCreation")]
    partial class InititialCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("Sensors_WPF__.NET_03._1_.Modes.AbstractMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Modes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AbstractMode");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Sensors_WPF__.NET_03._1_.Sensors.Sensor", b =>
                {
                    b.Property<int>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AbstractModeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SensorType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SensorId");

                    b.HasIndex("AbstractModeId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("Sensors_WPF__.NET_03._1_.Modes.CalibrationMode", b =>
                {
                    b.HasBaseType("Sensors_WPF__.NET_03._1_.Modes.AbstractMode");

                    b.HasDiscriminator().HasValue("CalibrationMode");
                });

            modelBuilder.Entity("Sensors_WPF__.NET_03._1_.Modes.SleepMode", b =>
                {
                    b.HasBaseType("Sensors_WPF__.NET_03._1_.Modes.AbstractMode");

                    b.HasDiscriminator().HasValue("SleepMode");
                });

            modelBuilder.Entity("Sensors_WPF__.NET_03._1_.Modes.WorkMode", b =>
                {
                    b.HasBaseType("Sensors_WPF__.NET_03._1_.Modes.AbstractMode");

                    b.HasDiscriminator().HasValue("WorkMode");
                });

            modelBuilder.Entity("Sensors_WPF__.NET_03._1_.Sensors.Sensor", b =>
                {
                    b.HasOne("Sensors_WPF__.NET_03._1_.Modes.AbstractMode", "AbstractMode")
                        .WithMany()
                        .HasForeignKey("AbstractModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AbstractMode");
                });
#pragma warning restore 612, 618
        }
    }
}
